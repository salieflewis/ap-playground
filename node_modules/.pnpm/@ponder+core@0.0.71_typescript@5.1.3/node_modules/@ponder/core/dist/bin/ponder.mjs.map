{"version":3,"sources":["../../src/utils/globals.ts","../../src/bin/ponder.ts","../../src/config/config.ts","../../src/config/options.ts","../../package.json"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport fetch, { Headers, Request, Response } from \"node-fetch\";\n\n/**\n * Set up a fetch polyfill for test runs using Node <16.\n */\nif (!globalThis.fetch) {\n  //@ts-ignore\n  globalThis.fetch = fetch;\n  //@ts-ignore\n  globalThis.Headers = Headers;\n  //@ts-ignore\n  globalThis.Request = Request;\n  //@ts-ignore\n  globalThis.Response = Response;\n}\n","#!/usr/bin/env node\n\nimport \"@/utils/globals\";\n\nimport { cac } from \"cac\";\nimport dotenv from \"dotenv\";\nimport path from \"node:path\";\n\nimport { buildConfig } from \"@/config/config\";\nimport { buildOptions } from \"@/config/options\";\nimport { Ponder } from \"@/Ponder\";\n\nimport packageJson from \"../../package.json\" assert { type: \"json\" };\n\ndotenv.config({ path: \".env.local\" });\n\nconst cli = cac(\"ponder\")\n  .version(packageJson.version)\n  .usage(\"<command> [options]\")\n  .help()\n  .option(\"--config-file [path]\", `Path to config file`, {\n    default: \"ponder.config.ts\",\n  })\n  .option(\"--root-dir [path]\", `Path to project root directory`, {\n    default: \".\",\n  });\n\nexport type CliOptions = {\n  help?: boolean;\n  configFile: string;\n  rootDir: string;\n};\n\ncli\n  .command(\"dev\", \"Start the development server\")\n  .action(async (cliOptions: CliOptions) => {\n    if (cliOptions.help) process.exit(0);\n\n    const configFile = path.resolve(cliOptions.configFile);\n    const config = await buildConfig({ configFile });\n    const options = buildOptions({ cliOptions, configOptions: config.options });\n\n    const devOptions = { ...options, uiEnabled: true };\n\n    const ponder = new Ponder({ config, options: devOptions });\n    registerKilledProcessListener(() => ponder.kill());\n    await ponder.dev();\n  });\n\ncli\n  .command(\"start\", \"Start the production server\")\n  .action(async (cliOptions: CliOptions) => {\n    if (cliOptions.help) process.exit(0);\n\n    const configFile = path.resolve(cliOptions.configFile);\n    const config = await buildConfig({ configFile });\n    const options = buildOptions({ cliOptions, configOptions: config.options });\n\n    const startOptions = { ...options, uiEnabled: false };\n\n    const ponder = new Ponder({ config, options: startOptions });\n    registerKilledProcessListener(() => ponder.kill());\n    await ponder.start();\n  });\n\ncli\n  .command(\"codegen\", \"Emit type files, then exit\")\n  .action(async (cliOptions: CliOptions) => {\n    if (cliOptions.help) process.exit(0);\n\n    const configFile = path.resolve(cliOptions.configFile);\n    const config = await buildConfig({ configFile });\n    const options = buildOptions({ cliOptions, configOptions: config.options });\n\n    const codegenOptions = {\n      ...options,\n      uiEnabled: false,\n      logLevel: \"silent\",\n    } as const;\n\n    const ponder = new Ponder({ config, options: codegenOptions });\n    registerKilledProcessListener(() => ponder.kill());\n    await ponder.codegen();\n  });\n\ncli.parse();\n\nfunction registerKilledProcessListener(fn: () => Promise<unknown>) {\n  let isKillListenerInProgress = false;\n\n  const listener = async () => {\n    if (isKillListenerInProgress) return;\n    isKillListenerInProgress = true;\n    await fn();\n    process.exit(0);\n  };\n\n  process.on(\"SIGINT\", listener); // CTRL+C\n  process.on(\"SIGQUIT\", listener); // Keyboard quit\n  process.on(\"SIGTERM\", listener); // `kill` command\n}\n","import { AbiEvent } from \"abitype\";\nimport { build } from \"esbuild\";\nimport { existsSync, rmSync } from \"node:fs\";\nimport path from \"path\";\n\nimport { ensureDirExists } from \"@/utils/exists\";\n\nexport type ResolvedConfig = {\n  /** Database to use for storing blockchain & entity data. Default: `\"postgres\"` if `DATABASE_URL` env var is present, otherwise `\"sqlite\"`. */\n  database?:\n    | {\n        kind: \"sqlite\";\n        /** Path to SQLite database file. Default: `\"./.ponder/cache.db\"`. */\n        filename?: string;\n      }\n    | {\n        kind: \"postgres\";\n        /** PostgreSQL database connection string. Default: `process.env.DATABASE_URL`. */\n        connectionString?: string;\n      };\n  /** List of blockchain networks. */\n  networks: {\n    /** Network name. Must be unique across all networks. */\n    name: string;\n    /** Chain ID of the network. */\n    chainId: number;\n    /** RPC URL. Default: if available, a public RPC provider. */\n    rpcUrl?: string;\n    /** Polling frequency (in ms). Default: `1_000`. */\n    pollingInterval?: number;\n    /** Maximum concurrency of RPC requests during the historical sync. Default: `10`. */\n    maxRpcRequestConcurrency?: number;\n  }[];\n  /** List of contracts to fetch & handle events from. Contracts defined here will be present in `context.contracts`. */\n  contracts?: {\n    /** Contract name. Must be unique across `contracts` and `filters`. */\n    name: string;\n    /** Network that this contract is deployed to. Must match a network name in `networks`. */\n    network: string; // TODO: narrow this type to TNetworks[number]['name']\n    /** Contract ABI as a file path or an Array object. Accepts a single ABI or a list of ABIs to be merged. */\n    abi: string | any[] | readonly any[] | (string | any[] | readonly any[])[];\n    /** Contract address. */\n    address: `0x${string}`;\n    /** Block number at which to start processing events (inclusive). Default: `0`. */\n    startBlock?: number;\n    /** Block number at which to stop processing events (inclusive). If `undefined`, events will be processed in real-time. Default: `undefined`. */\n    endBlock?: number;\n    /** Maximum block range to use when calling `eth_getLogs`. Default: `10_000`. */\n    maxBlockRange?: number;\n    /** Whether to fetch & process event logs for this contract. If `false`, this contract will still be present in `context.contracts`. Default: `true`. */\n    isLogEventSource?: boolean;\n  }[];\n  /** List of log filters from which to fetch & handle event logs. */\n  filters?: {\n    /** Filter name. Must be unique across `contracts` and `filters`. */\n    name: string;\n    /** Network that this filter is deployed to. Must match a network name in `networks`. */\n    network: string; // TODO: narrow this type to TNetworks[number]['name']\n    /** Log filter ABI as a file path or an Array object. Accepts a single ABI or a list of ABIs to be merged. */\n    abi: string | any[] | readonly any[] | (string | any[] | readonly any[])[];\n    /** Log filter options. */\n    filter: {\n      /** Contract addresses to include. If `undefined`, no filter will be applied. Default: `undefined`. */\n      address?: `0x${string}` | `0x${string}`[];\n    } & (\n      | {\n          /** Event signature to include. If `undefined`, no filter will be applied. Default: `undefined`. */\n          event?: AbiEvent;\n          /** Event arguments to include. If `undefined`, no filter will be applied. Default: `undefined`. */\n          args?: any[];\n        }\n      | {\n          event?: never;\n          args?: never;\n        }\n    );\n    /** Block number at which to start processing events (inclusive). Default: `0`. */\n    startBlock?: number;\n    /** Block number at which to stop processing events (inclusive). If `undefined`, events will be processed in real-time. Default: `undefined`. */\n    endBlock?: number;\n    /** Maximum block range to use when calling `eth_getLogs`. Default: `10_000`. */\n    maxBlockRange?: number;\n  }[];\n  /** Configuration for Ponder internals. */\n  options?: {\n    /** Maximum number of seconds to wait for event processing to be complete before responding as healthy. If event processing exceeds this duration, the API may serve incomplete data. Default: `240` (4 minutes). */\n    maxHealthcheckDuration?: number;\n  };\n};\n\nexport type Config =\n  | ResolvedConfig\n  | Promise<ResolvedConfig>\n  | (() => ResolvedConfig)\n  | (() => Promise<ResolvedConfig>);\n\nexport const buildConfig = async ({ configFile }: { configFile: string }) => {\n  if (!existsSync(configFile)) {\n    throw new Error(`Ponder config file not found, expected: ${configFile}`);\n  }\n\n  const buildFile = path.join(path.dirname(configFile), \"__ponder__.js\");\n  ensureDirExists(buildFile);\n\n  // Delete the build file before attempting to write it.\n  rmSync(buildFile, { force: true });\n\n  try {\n    await build({\n      entryPoints: [configFile],\n      outfile: buildFile,\n      platform: \"node\",\n      format: \"cjs\",\n      bundle: false,\n      logLevel: \"silent\",\n    });\n\n    const { default: rawDefault, config: rawConfig } = require(buildFile);\n    rmSync(buildFile, { force: true });\n\n    if (!rawConfig) {\n      if (rawDefault) {\n        throw new Error(\n          `Ponder config not found. ${path.basename(\n            configFile\n          )} must export a variable named \"config\" (Cannot be a default export)`\n        );\n      }\n      throw new Error(\n        `Ponder config not found. ${path.basename(\n          configFile\n        )} must export a variable named \"config\"`\n      );\n    }\n\n    let resolvedConfig: ResolvedConfig;\n\n    if (typeof rawConfig === \"function\") {\n      resolvedConfig = await rawConfig();\n    } else {\n      resolvedConfig = await rawConfig;\n    }\n\n    return resolvedConfig;\n  } catch (err) {\n    rmSync(buildFile, { force: true });\n    throw err;\n  }\n};\n","import path from \"node:path\";\nimport type { LevelWithSilent } from \"pino\";\n\nimport type { CliOptions } from \"@/bin/ponder\";\n\nimport type { ResolvedConfig } from \"./config\";\n\nexport type Options = {\n  configFile: string;\n  schemaFile: string;\n  rootDir: string;\n  srcDir: string;\n  generatedDir: string;\n  ponderDir: string;\n  logDir: string;\n\n  port: number;\n  maxHealthcheckDuration: number;\n\n  logLevel: LevelWithSilent;\n  uiEnabled: boolean;\n};\n\nexport const buildOptions = ({\n  cliOptions,\n  configOptions = {},\n}: {\n  cliOptions: CliOptions;\n  configOptions?: ResolvedConfig[\"options\"];\n}): Options => {\n  const railwayHealthcheckTimeout = process.env.RAILWAY_HEALTHCHECK_TIMEOUT_SEC\n    ? Math.max(Number(process.env.RAILWAY_HEALTHCHECK_TIMEOUT_SEC) - 5, 0) // Add 5 seconds of buffer.\n    : undefined;\n\n  const logLevel = (\n    process.env.PONDER_LOG_LEVEL &&\n    [\"silent\", \"fatal\", \"error\", \"warn\", \"info\", \"debug\", \"trace\"].includes(\n      process.env.PONDER_LOG_LEVEL\n    )\n      ? process.env.PONDER_LOG_LEVEL\n      : \"info\"\n  ) as LevelWithSilent;\n\n  const defaults = {\n    rootDir: path.resolve(cliOptions.rootDir),\n    configFile: cliOptions.configFile,\n    schemaFile: \"schema.graphql\",\n    srcDir: \"src\",\n    generatedDir: \"generated\",\n    ponderDir: \".ponder\",\n    logDir: \".ponder/logs\",\n\n    port: Number(process.env.PORT ?? 42069),\n    maxHealthcheckDuration:\n      configOptions?.maxHealthcheckDuration ?? railwayHealthcheckTimeout ?? 240,\n\n    logLevel,\n    uiEnabled: true,\n  };\n\n  return {\n    ...defaults,\n    // Resolve paths\n    configFile: path.join(defaults.rootDir, defaults.configFile),\n    schemaFile: path.join(defaults.rootDir, defaults.schemaFile),\n    srcDir: path.join(defaults.rootDir, defaults.srcDir),\n    generatedDir: path.join(defaults.rootDir, defaults.generatedDir),\n    ponderDir: path.join(defaults.rootDir, defaults.ponderDir),\n    logDir: path.join(defaults.rootDir, defaults.logDir),\n  };\n};\n","{\n  \"name\": \"@ponder/core\",\n  \"version\": \"0.0.71\",\n  \"description\": \"API builder for blockchain apps\",\n  \"license\": \"MIT\",\n  \"author\": \"olias.eth\",\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"bin\": {\n    \"ponder\": \"dist/bin/ponder.js\"\n  },\n  \"files\": [\n    \"/dist\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsup-node\",\n    \"test\": \"export $(grep -v '^#' .env.local | xargs) && vitest\",\n    \"test:ci\": \"CI=true vitest\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@babel/code-frame\": \"^7.18.6\",\n    \"@jridgewell/trace-mapping\": \"^0.3.17\",\n    \"@viem/anvil\": \"^0.0.5\",\n    \"async-mutex\": \"^0.4.0\",\n    \"better-sqlite3\": \"7\",\n    \"cac\": \"^6.7.14\",\n    \"chokidar\": \"^3.5.3\",\n    \"cors\": \"^2.8.5\",\n    \"data-uri-to-buffer\": \"3.0.1\",\n    \"dotenv\": \"^16.0.1\",\n    \"emittery\": \"^0.13.1\",\n    \"esbuild\": \"^0.15.2\",\n    \"ethereum-bloom-filters\": \"^1.0.10\",\n    \"express\": \"^4.18.1\",\n    \"express-graphql\": \"^0.12.0\",\n    \"glob\": \"^8.1.0\",\n    \"graphql\": \"^15.3.0\",\n    \"http-terminator\": \"^3.2.0\",\n    \"ink\": \"^3.2.0\",\n    \"kysely\": \"^0.24.2\",\n    \"node-fetch\": \"^2.6.7\",\n    \"p-limit\": \"3\",\n    \"p-queue\": \"^6.6.2\",\n    \"pg\": \"^8.9.0\",\n    \"picocolors\": \"^1.0.0\",\n    \"pino\": \"^8.14.1\",\n    \"prettier\": \"^2.6.2\",\n    \"prom-client\": \"^14.2.0\",\n    \"react\": \"17\",\n    \"retry\": \"^0.13.1\",\n    \"stacktrace-parser\": \"^0.1.10\",\n    \"tsc-alias\": \"^1.8.2\",\n    \"viem\": \"^1.2.6\"\n  },\n  \"devDependencies\": {\n    \"@types/babel__code-frame\": \"^7.0.3\",\n    \"@types/better-sqlite3\": \"^7.6.0\",\n    \"@types/cors\": \"^2.8.12\",\n    \"@types/detect-port\": \"^1.3.2\",\n    \"@types/express\": \"^4.17.13\",\n    \"@types/glob\": \"^8.0.0\",\n    \"@types/module-alias\": \"^2.0.1\",\n    \"@types/node\": \"^18.7.8\",\n    \"@types/node-fetch\": \"2\",\n    \"@types/pg\": \"^8.6.6\",\n    \"@types/react\": \"^18.0.25\",\n    \"@types/retry\": \"^0.12.2\",\n    \"@types/supertest\": \"^2.0.12\",\n    \"abitype\": \"^0.8.11\",\n    \"module-alias\": \"^2.2.2\",\n    \"supertest\": \"^6.3.3\",\n    \"tsup\": \"^6.7.0\",\n    \"typescript\": \"^5.1.3\",\n    \"vite\": \"^4.1.4\",\n    \"vitest\": \"^0.29.2\"\n  }\n}\n"],"mappings":"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","names":["path","path","path"]}