#!/usr/bin/env node
import {
  Ponder,
  __require,
  ensureDirExists
} from "../chunk-E2PLELPX.mjs";

// src/utils/globals.ts
import fetch, { Headers, Request, Response } from "node-fetch";
if (!globalThis.fetch) {
  globalThis.fetch = fetch;
  globalThis.Headers = Headers;
  globalThis.Request = Request;
  globalThis.Response = Response;
}

// src/bin/ponder.ts
import { cac } from "cac";
import dotenv from "dotenv";
import path3 from "node:path";

// src/config/config.ts
import { build } from "esbuild";
import { existsSync, rmSync } from "node:fs";
import path from "path";
var buildConfig = async ({ configFile }) => {
  if (!existsSync(configFile)) {
    throw new Error(`Ponder config file not found, expected: ${configFile}`);
  }
  const buildFile = path.join(path.dirname(configFile), "__ponder__.js");
  ensureDirExists(buildFile);
  rmSync(buildFile, { force: true });
  try {
    await build({
      entryPoints: [configFile],
      outfile: buildFile,
      platform: "node",
      format: "cjs",
      bundle: false,
      logLevel: "silent"
    });
    const { default: rawDefault, config: rawConfig } = __require(buildFile);
    rmSync(buildFile, { force: true });
    if (!rawConfig) {
      if (rawDefault) {
        throw new Error(
          `Ponder config not found. ${path.basename(
            configFile
          )} must export a variable named "config" (Cannot be a default export)`
        );
      }
      throw new Error(
        `Ponder config not found. ${path.basename(
          configFile
        )} must export a variable named "config"`
      );
    }
    let resolvedConfig;
    if (typeof rawConfig === "function") {
      resolvedConfig = await rawConfig();
    } else {
      resolvedConfig = await rawConfig;
    }
    return resolvedConfig;
  } catch (err) {
    rmSync(buildFile, { force: true });
    throw err;
  }
};

// src/config/options.ts
import path2 from "node:path";
var buildOptions = ({
  cliOptions,
  configOptions = {}
}) => {
  const railwayHealthcheckTimeout = process.env.RAILWAY_HEALTHCHECK_TIMEOUT_SEC ? Math.max(Number(process.env.RAILWAY_HEALTHCHECK_TIMEOUT_SEC) - 5, 0) : void 0;
  const logLevel = process.env.PONDER_LOG_LEVEL && ["silent", "fatal", "error", "warn", "info", "debug", "trace"].includes(
    process.env.PONDER_LOG_LEVEL
  ) ? process.env.PONDER_LOG_LEVEL : "info";
  const defaults = {
    rootDir: path2.resolve(cliOptions.rootDir),
    configFile: cliOptions.configFile,
    schemaFile: "schema.graphql",
    srcDir: "src",
    generatedDir: "generated",
    ponderDir: ".ponder",
    logDir: ".ponder/logs",
    port: Number(process.env.PORT ?? 42069),
    maxHealthcheckDuration: configOptions?.maxHealthcheckDuration ?? railwayHealthcheckTimeout ?? 240,
    logLevel,
    uiEnabled: true
  };
  return {
    ...defaults,
    // Resolve paths
    configFile: path2.join(defaults.rootDir, defaults.configFile),
    schemaFile: path2.join(defaults.rootDir, defaults.schemaFile),
    srcDir: path2.join(defaults.rootDir, defaults.srcDir),
    generatedDir: path2.join(defaults.rootDir, defaults.generatedDir),
    ponderDir: path2.join(defaults.rootDir, defaults.ponderDir),
    logDir: path2.join(defaults.rootDir, defaults.logDir)
  };
};

// package.json
var package_default = {
  name: "@ponder/core",
  version: "0.0.71",
  description: "API builder for blockchain apps",
  license: "MIT",
  author: "olias.eth",
  main: "dist/index.js",
  module: "dist/index.mjs",
  types: "dist/index.d.ts",
  bin: {
    ponder: "dist/bin/ponder.js"
  },
  files: [
    "/dist"
  ],
  scripts: {
    build: "tsup-node",
    test: "export $(grep -v '^#' .env.local | xargs) && vitest",
    "test:ci": "CI=true vitest",
    typecheck: "tsc --noEmit"
  },
  dependencies: {
    "@babel/code-frame": "^7.18.6",
    "@jridgewell/trace-mapping": "^0.3.17",
    "@viem/anvil": "^0.0.5",
    "async-mutex": "^0.4.0",
    "better-sqlite3": "7",
    cac: "^6.7.14",
    chokidar: "^3.5.3",
    cors: "^2.8.5",
    "data-uri-to-buffer": "3.0.1",
    dotenv: "^16.0.1",
    emittery: "^0.13.1",
    esbuild: "^0.15.2",
    "ethereum-bloom-filters": "^1.0.10",
    express: "^4.18.1",
    "express-graphql": "^0.12.0",
    glob: "^8.1.0",
    graphql: "^15.3.0",
    "http-terminator": "^3.2.0",
    ink: "^3.2.0",
    kysely: "^0.24.2",
    "node-fetch": "^2.6.7",
    "p-limit": "3",
    "p-queue": "^6.6.2",
    pg: "^8.9.0",
    picocolors: "^1.0.0",
    pino: "^8.14.1",
    prettier: "^2.6.2",
    "prom-client": "^14.2.0",
    react: "17",
    retry: "^0.13.1",
    "stacktrace-parser": "^0.1.10",
    "tsc-alias": "^1.8.2",
    viem: "^1.2.6"
  },
  devDependencies: {
    "@types/babel__code-frame": "^7.0.3",
    "@types/better-sqlite3": "^7.6.0",
    "@types/cors": "^2.8.12",
    "@types/detect-port": "^1.3.2",
    "@types/express": "^4.17.13",
    "@types/glob": "^8.0.0",
    "@types/module-alias": "^2.0.1",
    "@types/node": "^18.7.8",
    "@types/node-fetch": "2",
    "@types/pg": "^8.6.6",
    "@types/react": "^18.0.25",
    "@types/retry": "^0.12.2",
    "@types/supertest": "^2.0.12",
    abitype: "^0.8.11",
    "module-alias": "^2.2.2",
    supertest: "^6.3.3",
    tsup: "^6.7.0",
    typescript: "^5.1.3",
    vite: "^4.1.4",
    vitest: "^0.29.2"
  }
};

// src/bin/ponder.ts
dotenv.config({ path: ".env.local" });
var cli = cac("ponder").version(package_default.version).usage("<command> [options]").help().option("--config-file [path]", `Path to config file`, {
  default: "ponder.config.ts"
}).option("--root-dir [path]", `Path to project root directory`, {
  default: "."
});
cli.command("dev", "Start the development server").action(async (cliOptions) => {
  if (cliOptions.help)
    process.exit(0);
  const configFile = path3.resolve(cliOptions.configFile);
  const config = await buildConfig({ configFile });
  const options = buildOptions({ cliOptions, configOptions: config.options });
  const devOptions = { ...options, uiEnabled: true };
  const ponder = new Ponder({ config, options: devOptions });
  registerKilledProcessListener(() => ponder.kill());
  await ponder.dev();
});
cli.command("start", "Start the production server").action(async (cliOptions) => {
  if (cliOptions.help)
    process.exit(0);
  const configFile = path3.resolve(cliOptions.configFile);
  const config = await buildConfig({ configFile });
  const options = buildOptions({ cliOptions, configOptions: config.options });
  const startOptions = { ...options, uiEnabled: false };
  const ponder = new Ponder({ config, options: startOptions });
  registerKilledProcessListener(() => ponder.kill());
  await ponder.start();
});
cli.command("codegen", "Emit type files, then exit").action(async (cliOptions) => {
  if (cliOptions.help)
    process.exit(0);
  const configFile = path3.resolve(cliOptions.configFile);
  const config = await buildConfig({ configFile });
  const options = buildOptions({ cliOptions, configOptions: config.options });
  const codegenOptions = {
    ...options,
    uiEnabled: false,
    logLevel: "silent"
  };
  const ponder = new Ponder({ config, options: codegenOptions });
  registerKilledProcessListener(() => ponder.kill());
  await ponder.codegen();
});
cli.parse();
function registerKilledProcessListener(fn) {
  let isKillListenerInProgress = false;
  const listener = async () => {
    if (isKillListenerInProgress)
      return;
    isKillListenerInProgress = true;
    await fn();
    process.exit(0);
  };
  process.on("SIGINT", listener);
  process.on("SIGQUIT", listener);
  process.on("SIGTERM", listener);
}
//# sourceMappingURL=ponder.mjs.map